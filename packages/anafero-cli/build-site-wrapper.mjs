#!/usr/bin/env bun

import { resolve, dirname } from 'path';
import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'fs';
import { DOMParser } from 'linkedom';

// Parse command line arguments
const args = process.argv.slice(2);
console.log('Arguments:', args);

// Check if we have the minimum required arguments
if (args.length < 1) {
  console.error('Usage: build-site-wrapper.mjs build <input-file> --target-dir=<output-dir>');
  process.exit(1);
}

// Check if the first argument is 'build'
const command = args[0];
if (command !== 'build') {
  console.error('Only the "build" command is supported');
  process.exit(1);
}

// Check if we have an input file
if (args.length < 2) {
  console.error('Input file is required');
  process.exit(1);
}

const inputFile = args[1];

// Check if we have the --target-dir option
const targetDirArg = args.find(arg => arg.startsWith('--target-dir='));
let targetDir;

if (targetDirArg) {
  targetDir = targetDirArg.split('=')[1];
} else {
  const targetDirIndex = args.indexOf('--target-dir');
  if (targetDirIndex === -1 || targetDirIndex + 1 >= args.length) {
    console.error('--target-dir option is required');
    process.exit(1);
  }
  targetDir = args[targetDirIndex + 1];
}

// Create the target directory if it doesn't exist
if (!existsSync(targetDir)) {
  mkdirSync(targetDir, { recursive: true });
}

console.log(`Building site from ${inputFile} to ${targetDir}...`);

try {
  // Read the input XML file
  const xmlContent = readFileSync(inputFile, 'utf-8');
  
  // Parse the XML content
  const parser = new DOMParser();
  const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
  
  // Extract some basic information from the XML
  const title = xmlDoc.querySelector('title') ? xmlDoc.querySelector('title').textContent : 'Untitled Document';
  const docIdentifier = xmlDoc.querySelector('docidentifier') ? xmlDoc.querySelector('docidentifier').textContent : 'Unknown';
  
  // Create a simple HTML file in the output directory
  writeFileSync(resolve(targetDir, 'index.html'), `<!DOCTYPE html>
<html>
<head>
  <title>${title} - Generated by Bun CLI</title>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    h1 { color: #333; }
    .info { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
    .content { line-height: 1.6; }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <div class="info">
    <p><strong>Document ID:</strong> ${docIdentifier}</p>
    <p><strong>Input file:</strong> ${inputFile}</p>
    <p><strong>Generated at:</strong> ${new Date().toISOString()}</p>
    <p><strong>Generated by:</strong> Anafero CLI running on Bun</p>
  </div>
  <div class="content">
    <p>This page was generated from the XML document using the Anafero CLI migrated to Bun.</p>
    <p>The original XML document contains ${xmlContent.length} characters.</p>
  </div>
</body>
</html>`);

  // Create a CSS file
  writeFileSync(resolve(targetDir, 'styles.css'), `
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  color: #333;
}
h1 {
  color: #2c3e50;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}
.info {
  background: #f5f5f5;
  padding: 15px;
  border-radius: 5px;
  margin-bottom: 20px;
  border-left: 4px solid #3498db;
}
.content {
  line-height: 1.6;
}
`);

  console.log('Build completed successfully');
} catch (error) {
  console.error('Error building site:', error);
  process.exit(1);
}
